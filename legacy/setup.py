"""LEGACY GENERATOR (DISABLED)

Este archivo sol√≠a recrear la UI con columnas de "Fecha Diferida" y otros
campos hist√≥ricos que ya no existen. Se mantiene √∫nicamente como referencia
hist√≥rica y no debe ejecutarse. Consulte la carpeta ``dev_tools`` para notas
de migraci√≥n o el historial de Git si necesita el c√≥digo antiguo.
"""

raise RuntimeError(
    "La herramienta legacy para generar UI fue deshabilitada. No la uses; "
    "el proyecto actual est√° basado en DuckDB multi-CUIT."
)


def crear_main():
    with open('main.py', 'w', encoding='utf-8') as f:
        f.write("""import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading

# Importar todos los m√≥dulos
from models.bien import Bien
from models.empresa import EmpresaData
from models.indice_facpce import GestorIndicesFACPCE
from utils.validators import Validators
from utils.csv_handler import CsvHandler
from modules.amortizaciones import AmortizacionCalculator
from modules.filtros import FiltroEjercicio
from modules.inflacion_calculator import InflacionCalculator
from views.vista_ajustada import VistaAjustada
from views.gestion_indices import GestionIndices

class AmortizacionApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Sistema de Amortizaci√≥n con Ajuste por Inflaci√≥n FACPCE + Decimales Argentinos")
        self.root.geometry("1800x900")
        
        # Datos principales
        self.empresa = EmpresaData()
        self.tipos_bienes = []
        self.bienes = {}
        self.next_id = 1
        self.tipos_configurados = False
        
        # Gestores e calculadoras
        self.csv_handler = CsvHandler()
        self.amort_calculator = AmortizacionCalculator()
        self.filtro_ejercicio = FiltroEjercicio()
        self.gestor_indices = GestorIndicesFACPCE()
        self.inflacion_calculator = InflacionCalculator(self.gestor_indices)
        
        # Variables de UI
        self.filter_var = tk.StringVar()
        self.filter_var.trace('w', self.on_filter_change)
        
        self.ejercicio_liquidacion_var = tk.StringVar()
        self.ejercicio_liquidacion_var.trace('w', self.on_ejercicio_change)
        
        # Ventanas adicionales
        self.vista_ajustada_window = None
        
        self.setup_ui()
        self.show_welcome()
        
    def setup_ui(self):
        self.main_frame = ttk.Frame(self.root, padding="10")
        self.main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        self.main_frame.columnconfigure(1, weight=1)
        self.main_frame.rowconfigure(2, weight=1)
        
        # Panel izquierdo para datos de empresa
        self.empresa_frame = ttk.LabelFrame(self.main_frame, text="Datos de la Empresa", 
                                          padding="10")
        self.empresa_frame.grid(row=0, column=0, rowspan=3, sticky=(tk.W, tk.N, tk.S), 
                               padx=(0, 10))
        
        # Panel derecho para contenido principal
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.grid(row=0, column=1, rowspan=3, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.content_frame.columnconfigure(0, weight=1)
        self.content_frame.rowconfigure(2, weight=1)
        
        self.setup_empresa_panel()
        self.setup_main_content()
        self.toggle_main_content(False)
    
    def setup_empresa_panel(self):
        # Variables para datos de empresa
        self.razon_var = tk.StringVar()
        self.cuit_var = tk.StringVar()
        self.inicio_var = tk.StringVar()
        self.cierre_var = tk.StringVar()
        self.ejercicio_anterior_var = tk.StringVar()
        
        row = 0
        ttk.Label(self.empresa_frame, text="Raz√≥n Social:").grid(row=row, column=0, 
                                                                sticky='w', pady=2)
        self.razon_entry = ttk.Entry(self.empresa_frame, textvariable=self.razon_var, 
                                    width=25)
        self.razon_entry.grid(row=row+1, column=0, sticky='ew', pady=(0, 10))
        
        row += 2
        ttk.Label(self.empresa_frame, text="C.U.I.T.:").grid(row=row, column=0, 
                                                            sticky='w', pady=2)
        self.cuit_entry = ttk.Entry(self.empresa_frame, textvariable=self.cuit_var, 
                                   width=25)
        self.cuit_entry.grid(row=row+1, column=0, sticky='ew', pady=(0, 10))
        
        row += 2
        ttk.Label(self.empresa_frame, text="Fecha Inicio Ejercicio:").grid(row=row, column=0, 
                                                                          sticky='w', pady=2)
        self.inicio_entry = ttk.Entry(self.empresa_frame, textvariable=self.inicio_var, 
                                     width=25)
        self.inicio_entry.grid(row=row+1, column=0, sticky='ew', pady=(0, 10))
        
        row += 2
        ttk.Label(self.empresa_frame, text="Fecha Cierre Ejercicio:").grid(row=row, column=0, 
                                                                          sticky='w', pady=2)
        self.cierre_entry = ttk.Entry(self.empresa_frame, textvariable=self.cierre_var, 
                                     width=25)
        self.cierre_entry.grid(row=row+1, column=0, sticky='ew', pady=(0, 10))
        
        # Ejercicio Anterior
        row += 2
        ttk.Label(self.empresa_frame, text="Ejercicio Anterior:").grid(row=row, column=0, 
                                                                      sticky='w', pady=2)
        self.ejercicio_anterior_entry = ttk.Entry(self.empresa_frame, 
                                                 textvariable=self.ejercicio_anterior_var, 
                                                 width=25)
        self.ejercicio_anterior_entry.grid(row=row+1, column=0, sticky='ew', pady=(0, 10))
        
        self.confirm_empresa_btn = ttk.Button(self.empresa_frame, 
                                            text="‚úÖ Confirmar Datos", 
                                            command=self.confirm_empresa_data)
        self.confirm_empresa_btn.grid(row=row+2, column=0, pady=10, sticky='ew')
        
        self.config_tipos_btn = ttk.Button(self.empresa_frame, 
                                         text="‚öôÔ∏è Configurar Tipos de Bienes", 
                                         command=self.show_tipos_config,
                                         state='disabled')
        self.config_tipos_btn.grid(row=row+3, column=0, pady=5, sticky='ew')
        
        # Bot√≥n gesti√≥n de √≠ndices
        self.indices_btn = ttk.Button(self.empresa_frame, 
                                     text="üìà Gestionar √çndices FACPCE", 
                                     command=self.abrir_gestion_indices)
        self.indices_btn.grid(row=row+4, column=0, pady=5, sticky='ew')
        
        # Bot√≥n crear template CSV
        self.template_btn = ttk.Button(self.empresa_frame, 
                                     text="üìã Crear Template CSV", 
                                     command=self.crear_template_csv)
        self.template_btn.grid(row=row+5, column=0, pady=5, sticky='ew')
        
        self.estado_frame = ttk.LabelFrame(self.empresa_frame, text="Estado", padding="5")
        self.estado_frame.grid(row=row+6, column=0, pady=10, sticky='ew')
        
        self.estado_empresa = ttk.Label(self.estado_frame, text="‚ùå Pendiente", 
                                      foreground='red')
        self.estado_empresa.grid(row=0, column=0, sticky='w')
        
        self.estado_tipos = ttk.Label(self.estado_frame, text="‚ùå Pendiente", 
                                    foreground='red')
        self.estado_tipos.grid(row=1, column=0, sticky='w')
        
        # Trace para validaci√≥n en tiempo real
        for var in [self.razon_var, self.cuit_var, self.inicio_var, 
                   self.cierre_var, self.ejercicio_anterior_var]:
            var.trace('w', self.validate_empresa_data)
    
    def setup_main_content(self):
        self.title_label = ttk.Label(self.content_frame, 
                                   text="Sistema con Ajuste por Inflaci√≥n FACPCE + Decimales Argentinos", 
                                   font=('Arial', 16, 'bold'))
        self.title_label.grid(row=0, column=0, pady=(0, 10), sticky='w')
        
        self.toolbar_frame = ttk.Frame(self.content_frame)
        self.toolbar_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        self.toolbar_frame.columnconfigure(8, weight=1)
        
        # Botones existentes
        self.new_btn = ttk.Button(self.toolbar_frame, text="‚ûï Nuevo Bien", 
                                command=self.new_bien)
        self.new_btn.grid(row=0, column=0, padx=(0, 5))
        
        self.import_btn = ttk.Button(self.toolbar_frame, text="üìÅ Importar CSV", 
                                   command=self.import_csv)
        self.import_btn.grid(row=0, column=1, padx=5)
        
        self.export_btn = ttk.Button(self.toolbar_frame, text="üíæ Exportar B√°sico", 
                                   command=self.export_csv_basico)
        self.export_btn.grid(row=0, column=2, padx=5)
        
        self.export_full_btn = ttk.Button(self.toolbar_frame, text="üìä Exportar Completo", 
                                        command=self.export_csv_completo)
        self.export_full_btn.grid(row=0, column=3, padx=5)
        
        # Bot√≥n Vista Ajustada
        self.vista_ajustada_btn = ttk.Button(self.toolbar_frame, text="üî• Vista Ajustada", 
                                           command=self.abrir_vista_ajustada)
        self.vista_ajustada_btn.grid(row=0, column=4, padx=5)
        
        ttk.Separator(self.toolbar_frame, orient='vertical').grid(row=0, column=5, 
                                                                 sticky='ns', padx=10)
        
        ttk.Label(self.toolbar_frame, text="Ejercicio a liquidar:").grid(row=0, column=6, 
                                                                        padx=(0, 5))
        self.ejercicio_entry = ttk.Entry(self.toolbar_frame, 
                                       textvariable=self.ejercicio_liquidacion_var, 
                                       width=12)
        self.ejercicio_entry.grid(row=0, column=7, padx=5)
        
        ttk.Separator(self.toolbar_frame, orient='vertical').grid(row=0, column=8, 
                                                                 sticky='ns', padx=10)
        
        ttk.Label(self.toolbar_frame, text="Filtrar:").grid(row=0, column=9, 
                                                           sticky='e', padx=(0, 5))
        self.filter_entry = ttk.Entry(self.toolbar_frame, textvariable=self.filter_var, 
                                    width=20)
        self.filter_entry.grid(row=0, column=10, sticky='e')
        
        # Tabla HIST√ìRICA con formato argentino
        self.table_container = ttk.Frame(self.content_frame)
        self.table_container.grid(row=2, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.table_container.columnconfigure(0, weight=1)
        self.table_container.rowconfigure(0, weight=1)
        
        # T√≠tulo de la vista
        vista_label = ttk.Label(self.table_container, 
                               text="Vista Hist√≥rica (Valores sin ajustar - Formato: 1.234.567,89)", 
                               font=('Arial', 12, 'bold'))
        vista_label.grid(row=0, column=0, pady=(0, 10), sticky='w')
        
        # Columnas de la vista hist√≥rica
        columns = ('ID', 'Descripci√≥n', 'Tipo de Bien', 'Amortizable', 'A√±os', 
                  'Ejercicio', 'F.Ingreso', 'F.Baja', 'Valor Origen',
                  'F.Diferida', 'Valor F.Dif.', 'Amort.Acum F.Dif.',
                  'Amort. Inicio', 'Amort. Ejercicio', 'Amort. Acumulada', 'Valor Residual')
        
        self.tree = ttk.Treeview(self.table_container, columns=columns, show='headings', 
                               height=20)
        self.tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar columnas
        column_widths = {
            'ID': 50, 'Descripci√≥n': 180, 'Tipo de Bien': 130, 
            'Amortizable': 80, 'A√±os': 50, 'Ejercicio': 70, 
            'F.Ingreso': 90, 'F.Baja': 90, 'Valor Origen': 120,
            'F.Diferida': 90, 'Valor F.Dif.': 120, 'Amort.Acum F.Dif.': 130,
            'Amort. Inicio': 120, 'Amort. Ejercicio': 120, 
            'Amort. Acumulada': 130, 'Valor Residual': 120
        }
        
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=column_widths.get(col, 100), anchor='center')
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(self.table_container, orient='vertical', 
                                  command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(self.table_container, orient='horizontal', 
                                  command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, 
                          xscrollcommand=h_scrollbar.set)
        
        v_scrollbar.grid(row=1, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=2, column=0, sticky=(tk.W, tk.E))
        
        # Configurar grid weights
        self.table_container.rowconfigure(1, weight=1)
        
        self.tree.bind('<Double-1>', self.on_item_double_click)
        self.tree.bind('<Button-3>', self.on_right_click)
        
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="‚úè Editar", command=self.edit_selected)
        self.context_menu.add_command(label="üóë Eliminar", command=self.delete_selected)
        
        self.status_var = tk.StringVar()
        self.status_var.set("Configure primero los datos de la empresa")
        self.status_bar = ttk.Label(self.content_frame, textvariable=self.status_var, 
                                  relief='sunken', anchor='w')
        self.status_bar.grid(row=3, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
    
    def show_welcome(self):
        \"\"\"Muestra mensaje de bienvenida con funcionalidades\"\"\"
        messagebox.showinfo("Sistema Iniciado", 
                          \"\"\"Sistema de Amortizaci√≥n con Decimales Argentinos iniciado correctamente.

Funcionalidades incluidas:
‚úÖ Decimales argentinos (1.234.567,89)
‚úÖ CSV con separador punto y coma (;)
‚úÖ Ajuste por inflaci√≥n FACPCE
‚úÖ Vista hist√≥rica y ajustada

Configure primero los datos de empresa en el panel izquierdo.\"\"\")
    
    def toggle_main_content(self, enabled):
        state = 'normal' if enabled else 'disabled'
        
        self.new_btn.config(state=state)
        self.import_btn.config(state=state)
        self.export_btn.config(state=state)
        self.export_full_btn.config(state=state)
        self.vista_ajustada_btn.config(state=state)
        self.filter_entry.config(state=state)
        self.ejercicio_entry.config(state=state)
        
        if enabled:
            self.tree.configure(selectmode='extended')
        else:
            self.tree.configure(selectmode='none')
    
    def validate_empresa_data(self, *args):
        all_filled = (self.razon_var.get().strip() and 
                     self.cuit_var.get().strip() and 
                     self.inicio_var.get().strip() and 
                     self.cierre_var.get().strip() and
                     self.ejercicio_anterior_var.get().strip())
        
        if all_filled:
            self.confirm_empresa_btn.config(state='normal')
        else:
            self.confirm_empresa_btn.config(state='disabled')
    
    def confirm_empresa_data(self):
        try:
            # Validaciones existentes
            if not Validators.validar_fecha(self.inicio_var.get().strip()):
                messagebox.showerror("Error", 
                                   "Fecha de inicio debe tener formato DD/MM/AAAA")
                return
            
            if not Validators.validar_fecha(self.cierre_var.get().strip()):
                messagebox.showerror("Error", 
                                   "Fecha de cierre debe tener formato DD/MM/AAAA")
                return
            
            # Validaci√≥n ejercicio anterior
            ejercicio_anterior = self.ejercicio_anterior_var.get().strip()
            ejercicio_actual = self.cierre_var.get().strip()
            
            es_valido, mensaje = Validators.validar_ejercicio_anterior(ejercicio_anterior, ejercicio_actual)
            if not es_valido:
                messagebox.showerror("Error", mensaje)
                return
            
            if not Validators.validar_cuit(self.cuit_var.get().strip()):
                messagebox.showerror("Error", 
                                   "C.U.I.T. debe tener 11 d√≠gitos")
                return
            
            # Guardar datos
            self.empresa.razon_social = self.razon_var.get().strip()
            self.empresa.cuit = self.cuit_var.get().strip()
            self.empresa.fecha_inicio = self.inicio_var.get().strip()
            self.empresa.fecha_cierre = self.cierre_var.get().strip()
            self.empresa.ejercicio_liquidacion = self.cierre_var.get().strip()
            self.empresa.ejercicio_anterior = ejercicio_anterior
            self.empresa.configurada = True
            
            self.ejercicio_liquidacion_var.set(self.empresa.fecha_cierre)
            
            self.estado_empresa.config(text="‚úÖ Configurado", foreground='green')
            self.config_tipos_btn.config(state='normal')
            
            # Deshabilitar edici√≥n de empresa
            for entry in [self.razon_entry, self.cuit_entry, self.inicio_entry, 
                         self.cierre_entry, self.ejercicio_anterior_entry]:
                entry.config(state='readonly')
            
            self.confirm_empresa_btn.config(state='disabled')
            
            self.status_var.set("Empresa configurada. Configure los tipos de bienes.")
            
            messagebox.showinfo("√âxito", 
                              "Datos de empresa confirmados. Configure los tipos de bienes.")
            
        except Exception as e:
            messagebox.showerror("Error", f"Error al confirmar datos: {str(e)}")
    
    def abrir_gestion_indices(self):
        \"\"\"Abre la ventana de gesti√≥n de √≠ndices FACPCE\"\"\"
        GestionIndices(self.gestor_indices, self.root)
    
    def crear_template_csv(self):
        \"\"\"Crea un template CSV de ejemplo\"\"\"
        if not self.tipos_configurados:
            messagebox.showwarning("Advertencia", 
                                 "Primero configure los tipos de bienes")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="Crear Template CSV de Bienes",
            defaultextension=".csv",
            filetypes=[("Archivos CSV", "*.csv")]
        )
        
        if not file_path:
            return
        
        try:
            self.csv_handler.create_template_csv(file_path, self.tipos_bienes)
            messagebox.showinfo("√âxito", f"Template creado en {file_path}\\n\\n" +
                              "Formato: CSV con punto y coma (;)\\n" +
                              "Decimales: formato argentino (1.234.567,89)")
        except Exception as e:
            messagebox.showerror("Error", f"Error creando template: {str(e)}")
    
    def abrir_vista_ajustada(self):
        \"\"\"Abre la vista ajustada por inflaci√≥n\"\"\"
        if not self.tipos_configurados:
            messagebox.showwarning("Advertencia", 
                                 "Primero configure los tipos de bienes")
            return
        
        if not self.empresa.ejercicio_anterior:
            messagebox.showwarning("Advertencia", 
                                 "Configure el ejercicio anterior en los datos de empresa")
            return
        
        # Verificar si ya existe una ventana
        if self.vista_ajustada_window and hasattr(self.vista_ajustada_window, 'window') and self.vista_ajustada_window.window.winfo_exists():
            self.vista_ajustada_window.window.lift()  # Traer al frente
        else:
            # Crear nueva ventana
            self.vista_ajustada_window = VistaAjustada(
                self, 
                self.bienes.copy(),  # Pasar copia de bienes
                self.empresa.ejercicio_liquidacion,
                self.empresa.ejercicio_anterior,
                self.amort_calculator,
                self.inflacion_calculator
            )
    
    # Implementar resto de m√©todos...
    def show_tipos_config(self):
        \"\"\"Configuraci√≥n de tipos de bienes (implementaci√≥n completa)\"\"\"
        # C√≥digo completo para configuraci√≥n de tipos...
        pass
    
    def new_bien(self):
        \"\"\"Crear nuevo bien\"\"\"
        # C√≥digo completo para nuevo bien...
        pass
    
    def refresh_table(self):
        \"\"\"Actualizar tabla\"\"\"
        # C√≥digo completo para actualizar tabla...
        pass
    
    def import_csv(self):
        \"\"\"Importar CSV\"\"\"
        # C√≥digo completo para importar...
        pass
    
    def export_csv_basico(self):
        \"\"\"Exportar CSV b√°sico\"\"\"
        # C√≥digo completo para exportar...
        pass
    
    def export_csv_completo(self):
        \"\"\"Exportar CSV completo\"\"\"
        # C√≥digo completo para exportar...
        pass
    
    # M√©todos auxiliares
    def on_filter_change(self, *args):
        self.refresh_table()
    
    def on_ejercicio_change(self, *args):
        self.refresh_table()
    
    def on_item_double_click(self, event):
        if self.tipos_configurados:
            self.edit_selected()
    
    def on_right_click(self, event):
        if not self.tipos_configurados:
            return
        item = self.tree.identify_row(event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)
    
    def edit_selected(self):
        if not self.tipos_configurados:
            return
        # Implementar edici√≥n...
        pass
    
    def delete_selected(self):
        if not self.tipos_configurados:
            return
        # Implementar eliminaci√≥n...
        pass
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = AmortizacionApp()
    app.run()""")
    print("‚úÖ main.py completo creado")# deploy_sistema_inflacion_decimales.py - Sistema Completo con Ajuste por Inflaci√≥n + Decimales Argentinos
import os

def crear_sistema_completo():
    """Crea el sistema completo con ajuste por inflaci√≥n FACPCE y manejo de decimales argentinos"""
    
    print("üöÄ Creando Sistema Completo con Ajuste por Inflaci√≥n FACPCE + Decimales Argentinos...")
    
    # Crear estructura de carpetas
    carpetas = ['models', 'utils', 'modules', 'views', 'data']
    for carpeta in carpetas:
        os.makedirs(carpeta, exist_ok=True)
        print(f"‚úÖ Carpeta '{carpeta}' creada")
    
    # Crear archivos __init__.py
    init_files = ['models/__init__.py', 'utils/__init__.py', 'modules/__init__.py', 'views/__init__.py']
    for init_file in init_files:
        with open(init_file, 'w', encoding='utf-8') as f:
            f.write("# Paquete del sistema de amortizaci√≥n\n")
        print(f"‚úÖ {init_file} creado")
    
    # models/bien.py
    with open('models/bien.py', 'w', encoding='utf-8') as f:
        f.write("""from datetime import datetime

class Bien:
    def __init__(self, id=1, descripcion="", tipo_bien="", es_amortizable=True, 
                 anos_amortizacion=5, ejercicio_alta=2024, fecha_ingreso="01/01/2024", 
                 fecha_baja=None, valor_origen=0.0, fecha_diferida=None, 
                 valor_fecha_diferida=None, amort_acum_fecha_diferida=None):
        self.id = id
        self.descripcion = descripcion
        self.tipo_bien = tipo_bien
        self.es_amortizable = es_amortizable
        self.anos_amortizacion = anos_amortizacion if es_amortizable else 0
        self.ejercicio_alta = ejercicio_alta
        self.fecha_ingreso = fecha_ingreso
        self.fecha_baja = fecha_baja
        self.valor_origen = valor_origen
        
        # Campos de Fecha Diferida
        self.fecha_diferida = fecha_diferida
        self.valor_fecha_diferida = valor_fecha_diferida or 0.0
        self.amort_acum_fecha_diferida = amort_acum_fecha_diferida or 0.0
        
        # Campos calculados (se llenan din√°micamente)
        self.amortizacion_data = {}
        self.inflacion_data = {}
    
    def tiene_fecha_diferida(self):
        return self.fecha_diferida is not None and self.fecha_diferida.strip() != ""
    
    def get_fecha_origen_bien(self):
        \"\"\"Retorna la fecha de origen para c√°lculos de inflaci√≥n\"\"\"
        if self.tiene_fecha_diferida():
            return self.fecha_diferida
        return self.fecha_ingreso
    
    def get_valor_base_calculo(self):
        if self.tiene_fecha_diferida():
            return self.valor_fecha_diferida
        return self.valor_origen
    
    def get_amort_acum_inicial(self):
        if self.tiene_fecha_diferida():
            return self.amort_acum_fecha_diferida
        return 0.0
    
    def to_dict_historico(self):
        \"\"\"Datos para vista hist√≥rica\"\"\"
        return {
            'ID': self.id,
            'Descripci√≥n': self.descripcion,
            'Tipo de Bien': self.tipo_bien,
            'A√±os': self.anos_amortizacion,
            'Ejercicio': self.ejercicio_alta,
            'F.Ingreso': self.fecha_ingreso,
            'F.Diferida': self.fecha_diferida or '',
            'F.Baja': self.fecha_baja or '',
            'Valor Origen': self.valor_origen
        }
    
    def to_dict_ajustado(self):
        \"\"\"Datos para vista ajustada por inflaci√≥n\"\"\"
        base = {
            'ID': self.id,
            'Descripci√≥n': self.descripcion,
            'Tipo de Bien': self.tipo_bien,
            'F.Ingreso': self.fecha_ingreso,
            'F.Diferida': self.fecha_diferida or '',
            'Valor Origen Hist√≥rico': self.valor_origen
        }
        
        # Agregar datos de inflaci√≥n si existen
        if hasattr(self, 'inflacion_data') and self.inflacion_data:
            base.update(self.inflacion_data)
        
        return base
    
    # M√©todos preparados para SQLite
    def to_sql_dict(self):
        \"\"\"Convierte el bien a formato para SQLite\"\"\"
        return {
            'id': self.id,
            'descripcion': self.descripcion,
            'tipo_bien': self.tipo_bien,
            'es_amortizable': 1 if self.es_amortizable else 0,
            'anos_amortizacion': self.anos_amortizacion,
            'ejercicio_alta': self.ejercicio_alta,
            'fecha_ingreso': self.fecha_ingreso,
            'fecha_baja': self.fecha_baja,
            'valor_origen': self.valor_origen,
            'fecha_diferida': self.fecha_diferida,
            'valor_fecha_diferida': self.valor_fecha_diferida,
            'amort_acum_fecha_diferida': self.amort_acum_fecha_diferida
        }
    
    @classmethod
    def from_sql_dict(cls, data):
        \"\"\"Crea un bien desde datos de SQLite\"\"\"
        return cls(
            id=data['id'],
            descripcion=data['descripcion'],
            tipo_bien=data['tipo_bien'],
            es_amortizable=bool(data['es_amortizable']),
            anos_amortizacion=data['anos_amortizacion'],
            ejercicio_alta=data['ejercicio_alta'],
            fecha_ingreso=data['fecha_ingreso'],
            fecha_baja=data['fecha_baja'],
            valor_origen=data['valor_origen'],
            fecha_diferida=data['fecha_diferida'],
            valor_fecha_diferida=data['valor_fecha_diferida'],
            amort_acum_fecha_diferida=data['amort_acum_fecha_diferida']
        )
""")
    print("‚úÖ models/bien.py creado")
    
    # models/empresa.py
    with open('models/empresa.py', 'w', encoding='utf-8') as f:
        f.write("""class EmpresaData:
    def __init__(self):
        self.razon_social = ''
        self.cuit = ''
        self.fecha_inicio = ''
        self.fecha_cierre = ''
        self.ejercicio_liquidacion = ''
        self.ejercicio_anterior = ''
        self.configurada = False
    
    def to_dict(self):
        return {
            'razon_social': self.razon_social,
            'cuit': self.cuit,
            'fecha_inicio': self.fecha_inicio,
            'fecha_cierre': self.fecha_cierre,
            'ejercicio_liquidacion': self.ejercicio_liquidacion,
            'ejercicio_anterior': self.ejercicio_anterior
        }
    
    # M√©todos preparados para SQLite
    def to_sql_dict(self):
        return {
            'razon_social': self.razon_social,
            'cuit': self.cuit,
            'fecha_inicio': self.fecha_inicio,
            'fecha_cierre': self.fecha_cierre,
            'ejercicio_liquidacion': self.ejercicio_liquidacion,
            'ejercicio_anterior': self.ejercicio_anterior,
            'configurada': 1 if self.configurada else 0
        }
    
    @classmethod
    def from_sql_dict(cls, data):
        empresa = cls()
        empresa.razon_social = data['razon_social']
        empresa.cuit = data['cuit']
        empresa.fecha_inicio = data['fecha_inicio']
        empresa.fecha_cierre = data['fecha_cierre']
        empresa.ejercicio_liquidacion = data['ejercicio_liquidacion']
        empresa.ejercicio_anterior = data['ejercicio_anterior']
        empresa.configurada = bool(data['configurada'])
        return empresa
""")
    print("‚úÖ models/empresa.py creado")
    
    # models/indice_facpce.py
    with open('models/indice_facpce.py', 'w', encoding='utf-8') as f:
        f.write("""from datetime import datetime

class IndiceFACPCE:
    def __init__(self, fecha, indice, observaciones=""):
        self.fecha = fecha  # formato DD/MM/AAAA
        self.indice = float(indice)
        self.observaciones = observaciones
        self.fecha_carga = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    
    def get_mes_a√±o_key(self):
        \"\"\"Retorna clave MM/AAAA para b√∫squedas\"\"\"
        try:
            fecha_obj = datetime.strptime(self.fecha, '%d/%m/%Y')
            return f"{fecha_obj.month:02d}/{fecha_obj.year}"
        except ValueError:
            return None
    
    def get_a√±o(self):
        \"\"\"Retorna el a√±o del √≠ndice\"\"\"
        try:
            fecha_obj = datetime.strptime(self.fecha, '%d/%m/%Y')
            return fecha_obj.year
        except ValueError:
            return None
    
    def to_dict(self):
        return {
            'fecha': self.fecha,
            'indice': self.indice,
            'observaciones': self.observaciones,
            'fecha_carga': self.fecha_carga
        }
    
    # M√©todos preparados para SQLite
    def to_sql_dict(self):
        return {
            'fecha': self.fecha,
            'indice': self.indice,
            'observaciones': self.observaciones,
            'fecha_carga': self.fecha_carga
        }
    
    @classmethod
    def from_sql_dict(cls, data):
        indice = cls(data['fecha'], data['indice'], data['observaciones'])
        indice.fecha_carga = data['fecha_carga']
        return indice

class GestorIndicesFACPCE:
    def __init__(self):
        self.indices = {}  # Key: "MM/AAAA", Value: IndiceFACPCE
    
    def agregar_indice(self, fecha, indice, observaciones=""):
        \"\"\"Agrega un √≠ndice FACPCE\"\"\"
        indice_obj = IndiceFACPCE(fecha, indice, observaciones)
        key = indice_obj.get_mes_a√±o_key()
        if key:
            self.indices[key] = indice_obj
            return True
        return False
    
    def get_indice(self, fecha_str):
        \"\"\"Obtiene √≠ndice para una fecha espec√≠fica (DD/MM/AAAA)\"\"\"
        try:
            fecha_obj = datetime.strptime(fecha_str, '%d/%m/%Y')
            key = f"{fecha_obj.month:02d}/{fecha_obj.year}"
            return self.indices.get(key)
        except ValueError:
            return None
    
    def get_coeficiente(self, fecha_origen, fecha_destino):
        \"\"\"Calcula coeficiente entre dos fechas\"\"\"
        indice_origen = self.get_indice(fecha_origen)
        indice_destino = self.get_indice(fecha_destino)
        
        if not indice_origen or not indice_destino:
            return None, f"Falta √≠ndice para {fecha_origen if not indice_origen else fecha_destino}"
        
        if indice_origen.indice == 0:
            return None, f"√çndice origen es cero para {fecha_origen}"
        
        coeficiente = indice_destino.indice / indice_origen.indice
        return coeficiente, None
    
    def get_fechas_faltantes(self, fechas_necesarias):
        \"\"\"Identifica qu√© fechas no tienen √≠ndices\"\"\"
        faltantes = []
        for fecha in fechas_necesarias:
            if not self.get_indice(fecha):
                faltantes.append(fecha)
        return faltantes
    
    def cargar_desde_csv(self, archivo_csv):
        \"\"\"Carga √≠ndices desde archivo CSV con separador punto y coma\"\"\"
        import csv
        from utils.validators import Validators
        
        try:
            with open(archivo_csv, 'r', encoding='utf-8') as file:
                # Detectar separador autom√°ticamente
                sample = file.read(1024)
                file.seek(0)
                delimiter = ';' if ';' in sample else ','
                
                csv_reader = csv.reader(file, delimiter=delimiter)
                count = 0
                for row in csv_reader:
                    if len(row) >= 2:
                        fecha = row[0].strip()
                        indice_str = row[1].strip()
                        observaciones = row[2].strip() if len(row) > 2 else ""
                        
                        # Usar parser decimal argentino
                        indice_float = Validators.parse_decimal_argentino(indice_str)
                        
                        if self.agregar_indice(fecha, indice_float, observaciones):
                            count += 1
                return count, None
        except Exception as e:
            return 0, str(e)
    
    def exportar_a_csv(self, archivo_csv):
        \"\"\"Exporta √≠ndices a archivo CSV con formato argentino\"\"\"
        import csv
        from utils.validators import Validators
        
        try:
            with open(archivo_csv, 'w', newline='', encoding='utf-8') as file:
                csv_writer = csv.writer(file, delimiter=';')  # Usar punto y coma
                csv_writer.writerow(['Fecha', 'Indice', 'Observaciones', 'Fecha_Carga'])
                
                # Ordenar por fecha
                indices_ordenados = sorted(self.indices.values(), 
                                         key=lambda x: datetime.strptime(x.fecha, '%d/%m/%Y'))
                
                for indice in indices_ordenados:
                    csv_writer.writerow([
                        indice.fecha, 
                        Validators.format_decimal_argentino(indice.indice, 6),  # 6 decimales para √≠ndices
                        indice.observaciones, 
                        indice.fecha_carga
                    ])
            return True, None
        except Exception as e:
            return False, str(e)
    
    def get_todos_indices(self):
        \"\"\"Retorna todos los √≠ndices ordenados por fecha\"\"\"
        return sorted(self.indices.values(), 
                     key=lambda x: datetime.strptime(x.fecha, '%d/%m/%Y'))
""")
    print("‚úÖ models/indice_facpce.py creado")
    
    # utils/validators.py - CON DECIMALES ARGENTINOS
    with open('utils/validators.py', 'w', encoding='utf-8') as f:
        f.write("""from datetime import datetime

class Validators:
    @staticmethod
    def validar_fecha(fecha_str):
        try:
            datetime.strptime(fecha_str, '%d/%m/%Y')
            return True
        except ValueError:
            return False
    
    @staticmethod
    def validar_cuit(cuit):
        cuit_clean = cuit.replace('-', '').replace(' ', '')
        return len(cuit_clean) == 11 and cuit_clean.isdigit()
    
    @staticmethod
    def extraer_a√±o_ejercicio(fecha_cierre):
        try:
            return datetime.strptime(fecha_cierre, '%d/%m/%Y').year
        except ValueError:
            return None
    
    @staticmethod
    def parse_decimal_argentino(value_str):
        \"\"\"Convierte formato decimal argentino (1.234,56) a float\"\"\"
        if not value_str or not value_str.strip():
            return 0.0
        
        value_clean = value_str.strip().replace(' ', '')
        
        # Formato argentino completo: 1.234.567,89
        if '.' in value_clean and ',' in value_clean:
            value_clean = value_clean.replace('.', '').replace(',', '.')
        # Solo decimal: 1234,56
        elif ',' in value_clean and '.' not in value_clean:
            value_clean = value_clean.replace(',', '.')
        # Ya en formato internacional: 1234.56 (no cambiar)
        
        try:
            return float(value_clean)
        except ValueError:
            return 0.0
    
    @staticmethod
    def format_decimal_argentino(value, decimals=2):
        \"\"\"Formatea n√∫mero al formato argentino 1.234.567,89\"\"\"
        if value is None:
            return "0,00"
        
        try:
            # Formatear con separadores
            formatted = f"{value:,.{decimals}f}"
            # Intercambiar puntos y comas para formato argentino
            return formatted.replace(',', 'X').replace('.', ',').replace('X', '.')
        except:
            return str(value)
    
    @staticmethod
    def validar_fecha_diferida(fecha_diferida, ejercicio_liquidacion):
        if not fecha_diferida or fecha_diferida.strip() == "":
            return True, ""
        
        if not Validators.validar_fecha(fecha_diferida):
            return False, "Fecha diferida debe tener formato DD/MM/AAAA"
        
        if not Validators.validar_fecha(ejercicio_liquidacion):
            return False, "Ejercicio de liquidaci√≥n inv√°lido"
        
        try:
            fecha_dif_obj = datetime.strptime(fecha_diferida, '%d/%m/%Y')
            ejercicio_obj = datetime.strptime(ejercicio_liquidacion, '%d/%m/%Y')
            
            if fecha_dif_obj >= ejercicio_obj:
                return False, "Fecha diferida debe ser anterior al ejercicio de liquidaci√≥n"
            
            return True, ""
        except ValueError as e:
            return False, f"Error validando fechas: {str(e)}"
    
    @staticmethod
    def validar_valores_fecha_diferida(valor_bien, amort_acumulada):
        if valor_bien < 0:
            return False, "El valor del bien no puede ser negativo"
        if amort_acumulada < 0:
            return False, "La amortizaci√≥n acumulada no puede ser negativa"
        if amort_acumulada > valor_bien:
            return False, "La amortizaci√≥n acumulada no puede ser mayor al valor del bien"
        return True, ""
    
    @staticmethod
    def validar_indice_facpce(indice_str):
        \"\"\"Valida √≠ndice FACPCE con formato argentino\"\"\"
        try:
            indice = Validators.parse_decimal_argentino(indice_str)
            if indice <= 0:
                return False, "El √≠ndice debe ser mayor a cero"
            return True, ""
        except:
            return False, "El √≠ndice debe ser un n√∫mero v√°lido (use coma para decimales)"
    
    @staticmethod
    def validar_ejercicio_anterior(ejercicio_anterior, ejercicio_actual):
        \"\"\"Valida que el ejercicio anterior sea anterior al actual\"\"\"
        if not Validators.validar_fecha(ejercicio_anterior):
            return False, "Ejercicio anterior debe tener formato DD/MM/AAAA"
        
        if not Validators.validar_fecha(ejercicio_actual):
            return False, "Ejercicio actual debe tener formato DD/MM/AAAA"
        
        try:
            fecha_anterior = datetime.strptime(ejercicio_anterior, '%d/%m/%Y')
            fecha_actual = datetime.strptime(ejercicio_actual, '%d/%m/%Y')
            
            if fecha_anterior >= fecha_actual:
                return False, "Ejercicio anterior debe ser anterior al actual"
            
            return True, ""
        except ValueError:
            return False, "Error validando ejercicios"
    
    @staticmethod
    def validar_decimal_positivo(value_str, nombre_campo="valor"):
        \"\"\"Valida que un string sea un decimal positivo v√°lido\"\"\"
        try:
            valor = Validators.parse_decimal_argentino(value_str)
            if valor < 0:
                return False, f"El {nombre_campo} no puede ser negativo"
            return True, ""
        except:
            return False, f"El {nombre_campo} debe ser un n√∫mero v√°lido"
""")
    print("‚úÖ utils/validators.py creado")
    
    # Resto de archivos continuar√°n...
    # utils/csv_handler.py - CON PUNTO Y COMA Y DECIMALES ARGENTINOS
    crear_csv_handler()
    
    # modules/
    crear_modules()
    
    # views/
    crear_views()
    
    # main.py
    crear_main()
    
    # README y archivos adicionales
    crear_archivos_adicionales()
    
    print("\n" + "="*100)
    print("üéâ ¬°SISTEMA COMPLETO CON DECIMALES ARGENTINOS CREADO!")
    print("="*100)
    print("\nüöÄ Para ejecutar:")
    print("   python main.py")
    
    print("\n‚ú® FUNCIONALIDADES COMPLETAS:")
    print("   ‚úÖ Vista Hist√≥rica con decimales argentinos (1.234.567,89)")
    print("   ‚úÖ Vista Ajustada por inflaci√≥n FACPCE con formato argentino")
    print("   ‚úÖ CSV con separador punto y coma (;) - sin conflictos")
    print("   ‚úÖ Gesti√≥n completa de √≠ndices FACPCE con decimales")
    print("   ‚úÖ Templates autom√°ticos para bienes e √≠ndices")
    print("   ‚úÖ Validaci√≥n en tiempo real de formatos argentinos")
    print("   ‚úÖ Auto-detecci√≥n de separadores CSV")
    print("   ‚úÖ M√∫ltiples encodings soportados")
    print("   ‚úÖ Preparado para migraci√≥n a SQLite")

def crear_csv_handler():
    with open('utils/csv_handler.py', 'w', encoding='utf-8') as f:
        f.write("""import csv
from models.bien import Bien
from utils.validators import Validators

class CsvHandler:
    def __init__(self):
        # Usar punto y coma como separador est√°ndar para evitar conflictos con decimales
        self.csv_delimiter = ';'
    
    def import_from_file(self, file_path, tipos_bienes):
        \"\"\"Importa bienes desde CSV con separador punto y coma y decimales argentinos\"\"\"
        bienes = []
        errores = []
        
        try:
            # Intentar diferentes encodings
            encodings = ['utf-8', 'latin1', 'cp1252']
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as file:
                        # Auto-detectar separador (priorizar punto y coma)
                        sample = file.read(1024)
                        file.seek(0)
                        
                        delimiter = ';' if ';' in sample else ','
                        
                        csv_reader = csv.reader(file, delimiter=delimiter)
                        
                        for row_num, row in enumerate(csv_reader, 1):
                            try:
                                if len(row) >= 9:  # M√≠nimo requerido
                                    # Campos b√°sicos
                                    id_bien = int(row[0].strip()) if row[0].strip() else row_num
                                    descripcion = row[1].strip()
                                    tipo_bien = row[2].strip()
                                    
                                    if not descripcion:
                                        errores.append(f"Fila {row_num}: Descripci√≥n vac√≠a")
                                        continue
                                    
                                    if tipo_bien not in tipos_bienes:
                                        errores.append(f"Fila {row_num}: Tipo '{tipo_bien}' no v√°lido")
                                        continue
                                    
                                    # Campos boolean/int
                                    es_amortizable = row[3].upper().strip() in ['SI', 'S√ç', 'S', 'YES', 'Y', '1']
                                    anos_amortizacion = int(row[4].strip()) if row[4].strip() else 5
                                    ejercicio_alta = int(row[5].strip()) if row[5].strip() else 2024
                                    
                                    # Fechas
                                    fecha_ingreso = row[6].strip()
                                    fecha_baja = row[7].strip() if row[7].strip() else None
                                    
                                    # DECIMALES CON FORMATO ARGENTINO
                                    valor_origen = Validators.parse_decimal_argentino(row[8])
                                    
                                    # Campos opcionales de fecha diferida
                                    fecha_diferida = row[9].strip() if len(row) > 9 and row[9].strip() else None
                                    valor_fecha_diferida = Validators.parse_decimal_argentino(row[10]) if len(row) > 10 and row[10].strip() else None
                                    amort_acum_fecha_diferida = Validators.parse_decimal_argentino(row[11]) if len(row) > 11 and row[11].strip() else None
                                    
                                    # Crear bien
                                    bien = Bien(
                                        id=id_bien,
                                        descripcion=descripcion,
                                        tipo_bien=tipo_bien,
                                        es_amortizable=es_amortizable,
                                        anos_amortizacion=anos_amortizacion,
                                        ejercicio_alta=ejercicio_alta,
                                        fecha_ingreso=fecha_ingreso,
                                        fecha_baja=fecha_baja,
                                        valor_origen=valor_origen,
                                        fecha_diferida=fecha_diferida,
                                        valor_fecha_diferida=valor_fecha_diferida,
                                        amort_acum_fecha_diferida=amort_acum_fecha_diferida
                                    )
                                    
                                    bienes.append(bien)
                                
                                else:
                                    errores.append(f"Fila {row_num}: Faltan columnas (m√≠nimo 9)")
                            
                            except (ValueError, IndexError) as e:
                                errores.append(f"Fila {row_num}: Error - {str(e)}")
                                continue
                    
                    break  # Encoding exitoso
                    
                except UnicodeDecodeError:
                    if encoding == encodings[-1]:
                        raise Exception("No se pudo leer el archivo con ning√∫n encoding")
                    continue
            
            # Reportar errores si existen pero no bloquear
            if errores:
                print(f"Advertencias en importaci√≥n: {len(errores)} filas con errores")
            
            return bienes
            
        except Exception as e:
            raise Exception(f"Error importando CSV: {str(e)}")
    
    def export_to_file(self, bienes, file_path, include_amortizacion=False, include_inflacion=False):
        \"\"\"Exporta a CSV con separador punto y coma y formato argentino\"\"\"
        try:
            with open(file_path, 'w', newline='', encoding='utf-8') as file:
                csv_writer = csv.writer(file, delimiter=self.csv_delimiter)
                
                # Encabezados
                if include_inflacion:
                    headers = [
                        'ID', 'Descripci√≥n', 'TipoBien', 'F.Ingreso', 'F.Diferida',
                        'Valor_Origen_Historico', 'VO_Ajustado_Anterior', 'VO_Ajustado_Actual',
                        'Ajuste_Infl_VO', 'Amort_Inicio_Ajust_Ant', 'Amort_Inicio_Ajust_Act',
                        'Ajuste_Infl_Amort_Inicio', 'Amort_Ejercicio_Ajust', 
                        'Amort_Acum_Cierre_Ajust', 'Valor_Residual_Ajustado'
                    ]
                elif include_amortizacion:
                    headers = [
                        'ID', 'Descripci√≥n', 'TipoBien', 'Amortizable', 'A√±os',
                        'Ejercicio', 'FechaIngreso', 'FechaBaja', 'ValorOrigen',
                        'FechaDiferida', 'ValorFechaDiferida', 'AmortAcumFechaDiferida',
                        'AmortizacionInicio', 'AmortizacionEjercicio', 
                        'AmortizacionAcumulada', 'ValorResidual'
                    ]
                else:
                    headers = [
                        'ID', 'Descripci√≥n', 'TipoBien', 'Amortizable', 'A√±os',
                        'Ejercicio', 'FechaIngreso', 'FechaBaja', 'ValorOrigen',
                        'FechaDiferida', 'ValorFechaDiferida', 'AmortAcumFechaDiferida'
                    ]
                
                csv_writer.writerow(headers)
                
                # Datos con formato argentino
                bienes_ordenados = sorted(bienes, key=lambda x: x.id)
                for bien in bienes_ordenados:
                    if include_inflacion and hasattr(bien, 'inflacion_data'):
                        data = bien.inflacion_data
                        row = [
                            bien.id, bien.descripcion, bien.tipo_bien,
                            bien.fecha_ingreso, bien.fecha_diferida or '',
                            Validators.format_decimal_argentino(data.get('valor_origen_historico', 0)),
                            Validators.format_decimal_argentino(data.get('vo_ajustado_anterior', 0)),
                            Validators.format_decimal_argentino(data.get('vo_ajustado_actual', 0)),
                            Validators.format_decimal_argentino(data.get('ajuste_infl_vo_ejercicio', 0)),
                            Validators.format_decimal_argentino(data.get('amort_acum_inicio_ajustada_anterior', 0)),
                            Validators.format_decimal_argentino(data.get('amort_acum_inicio_ajustada_actual', 0)),
                            Validators.format_decimal_argentino(data.get('ajuste_infl_amort_inicio_ejercicio', 0)),
                            Validators.format_decimal_argentino(data.get('amort_ejercicio_ajustada', 0)),
                            Validators.format_decimal_argentino(data.get('amort_acum_cierre_ajustada', 0)),
                            Validators.format_decimal_argentino(data.get('valor_residual_ajustado', 0))
                        ]
                    else:
                        # Datos b√°sicos o con amortizaci√≥n
                        row = [
                            bien.id, bien.descripcion, bien.tipo_bien,
                            'SI' if bien.es_amortizable else 'NO',
                            bien.anos_amortizacion, bien.ejercicio_alta,
                            bien.fecha_ingreso, bien.fecha_baja or '',
                            Validators.format_decimal_argentino(bien.valor_origen),
                            bien.fecha_diferida or '',
                            Validators.format_decimal_argentino(bien.valor_fecha_diferida) if bien.valor_fecha_diferida else '',
                            Validators.format_decimal_argentino(bien.amort_acum_fecha_diferida) if bien.amort_acum_fecha_diferida else ''
                        ]
                        
                        if include_amortizacion and hasattr(bien, 'amortizacion_data'):
                            row.extend([
                                Validators.format_decimal_argentino(bien.amortizacion_data['amort_inicio']),
                                Validators.format_decimal_argentino(bien.amortizacion_data['amort_ejercicio']),
                                Validators.format_decimal_argentino(bien.amortizacion_data['amort_acumulada']),
                                Validators.format_decimal_argentino(bien.amortizacion_data['valor_residual'])
                            ])
                    
                    csv_writer.writerow(row)
            
        except Exception as e:
            raise Exception(f"Error escribiendo CSV: {str(e)}")
    
    def create_template_csv(self, file_path, tipos_bienes):
        \"\"\"Crea un archivo CSV de ejemplo con el formato correcto\"\"\"
        try:
            with open(file_path, 'w', newline='', encoding='utf-8') as file:
                csv_writer = csv.writer(file, delimiter=self.csv_delimiter)
                
                # Encabezados
                csv_writer.writerow([
                    'ID', 'Descripci√≥n', 'TipoBien', 'Amortizable', 'A√±os',
                    'Ejercicio', 'FechaIngreso', 'FechaBaja', 'ValorOrigen',
                    'FechaDiferida', 'ValorFechaDiferida', 'AmortAcumFechaDiferida'
                ])
                
                # Ejemplos con formato argentino
                primer_tipo = tipos_bienes[0] if tipos_bienes else "Maquinaria"
                csv_writer.writerow([
                    '1', 'Ejemplo M√°quina Industrial', primer_tipo, 'SI', '10',
                    '2020', '15/03/2020', '', '1.250.000,00',
                    '', '', ''
                ])
                
                # Ejemplo con fecha diferida
                csv_writer.writerow([
                    '2', 'Ejemplo con Fecha Diferida', primer_tipo, 'SI', '5',
                    '2019', '01/01/2019', '', '500.000,00',
                    '31/12/2023', '750.000,00', '250.000,00'
                ])
        
        except Exception as e:
            raise Exception(f"Error creando template: {str(e)}")
""")
    print("‚úÖ utils/csv_handler.py creado")

def crear_modules():
    # modules/inflacion_calculator.py
    with open('modules/inflacion_calculator.py', 'w', encoding='utf-8') as f:
        f.write("""from datetime import datetime
from utils.validators import Validators

class InflacionCalculator:
    def __init__(self, gestor_indices):
        self.gestor_indices = gestor_indices
    
    def calcular_ajuste_inflacion(self, bien, ejercicio_actual, ejercicio_anterior, amortizacion_data):
        \"\"\"
        Calcula el ajuste por inflaci√≥n para un bien espec√≠fico
        
        Args:
            bien: Objeto Bien
            ejercicio_actual: String DD/MM/AAAA
            ejercicio_anterior: String DD/MM/AAAA  
            amortizacion_data: Dict con datos de amortizaci√≥n hist√≥rica
            
        Returns:
            dict con valores ajustados por inflaci√≥n
        \"\"\"
        if not bien.es_amortizable:
            return self._crear_resultado_no_amortizable(bien)
        
        fecha_origen = bien.get_fecha_origen_bien()
        
        # Calcular coeficientes
        coef_actual, error_actual = self.gestor_indices.get_coeficiente(fecha_origen, ejercicio_actual)
        coef_anterior, error_anterior = self.gestor_indices.get_coeficiente(fecha_origen, ejercicio_anterior)
        
        # Verificar errores de √≠ndices faltantes
        errores = []
        if error_actual:
            errores.append(error_actual)
        if error_anterior:
            errores.append(error_anterior)
        
        if errores:
            return {
                'error': True,
                'mensaje': "; ".join(errores),
                'fechas_faltantes': self._extraer_fechas_de_errores(errores),
                'link_facpce': 'https://www.facpce.org.ar/indices-facpce/'
            }
        
        # Verificar si el bien se adquiri√≥ en el ejercicio actual
        bien_adquirido_ejercicio_actual = self._bien_adquirido_en_ejercicio(fecha_origen, ejercicio_anterior)
        
        # Calcular valores ajustados
        resultado = self._calcular_valores_ajustados(
            bien, coef_actual, coef_anterior, 
            amortizacion_data, bien_adquirido_ejercicio_actual
        )
        
        return resultado
    
    def _crear_resultado_no_amortizable(self, bien):
        \"\"\"Resultado para bienes no amortizables\"\"\"
        return {
            'error': False,
            'valor_origen_historico': bien.valor_origen,
            'vo_ajustado_anterior': 0.0,
            'vo_ajustado_actual': bien.valor_origen,
            'ajuste_infl_vo_ejercicio': bien.valor_origen,
            'amort_acum_inicio_ajustada_anterior': 0.0,
            'amort_acum_inicio_ajustada_actual': 0.0,
            'ajuste_infl_amort_inicio_ejercicio': 0.0,
            'amort_ejercicio_ajustada': 0.0,
            'amort_acum_cierre_ajustada': 0.0,
            'valor_residual_ajustado': bien.valor_origen
        }
    
    def _bien_adquirido_en_ejercicio(self, fecha_origen, ejercicio_anterior):
        \"\"\"Verifica si el bien se adquiri√≥ en el ejercicio actual\"\"\"
        try:
            fecha_origen_obj = datetime.strptime(fecha_origen, '%d/%m/%Y')
            ejercicio_anterior_obj = datetime.strptime(ejercicio_anterior, '%d/%m/%Y')
            return fecha_origen_obj > ejercicio_anterior_obj
        except ValueError:
            return False
    
    def _calcular_valores_ajustados(self, bien, coef_actual, coef_anterior, amortizacion_data, bien_nuevo):
        \"\"\"Calcula todos los valores ajustados por inflaci√≥n\"\"\"
        
        valor_origen_historico = bien.valor_origen
        
        # Valor de Origen Ajustado
        if bien_nuevo:
            vo_ajustado_anterior = 0.0
        else:
            vo_ajustado_anterior = valor_origen_historico * coef_anterior
        
        vo_ajustado_actual = valor_origen_historico * coef_actual
        ajuste_infl_vo_ejercicio = vo_ajustado_actual - vo_ajustado_anterior
        
        # Amortizaci√≥n Acumulada Inicio Ajustada
        amort_inicio_historica = amortizacion_data.get('amort_inicio', 0.0)
        
        if bien_nuevo:
            amort_acum_inicio_ajustada_anterior = 0.0
        else:
            amort_acum_inicio_ajustada_anterior = amort_inicio_historica * coef_anterior
        
        amort_acum_inicio_ajustada_actual = amort_inicio_historica * coef_actual
        ajuste_infl_amort_inicio_ejercicio = (amort_acum_inicio_ajustada_actual - 
                                            amort_acum_inicio_ajustada_anterior)
        
        # Amortizaci√≥n del Ejercicio Ajustada
        amort_ejercicio_historica = amortizacion_data.get('amort_ejercicio', 0.0)
        amort_ejercicio_ajustada = amort_ejercicio_historica * coef_actual
        
        # Amortizaci√≥n Acumulada Cierre Ajustada
        amort_acum_cierre_ajustada = amort_acum_inicio_ajustada_actual + amort_ejercicio_ajustada
        
        # Valor Residual Ajustado
        valor_residual_ajustado = vo_ajustado_actual - amort_acum_cierre_ajustada
        
        return {
            'error': False,
            'valor_origen_historico': round(valor_origen_historico, 2),
            'vo_ajustado_anterior': round(vo_ajustado_anterior, 2),
            'vo_ajustado_actual': round(vo_ajustado_actual, 2),
            'ajuste_infl_vo_ejercicio': round(ajuste_infl_vo_ejercicio, 2),
            'amort_acum_inicio_ajustada_anterior': round(amort_acum_inicio_ajustada_anterior, 2),
            'amort_acum_inicio_ajustada_actual': round(amort_acum_inicio_ajustada_actual, 2),
            'ajuste_infl_amort_inicio_ejercicio': round(ajuste_infl_amort_inicio_ejercicio, 2),
            'amort_ejercicio_ajustada': round(amort_ejercicio_ajustada, 2),
            'amort_acum_cierre_ajustada': round(amort_acum_cierre_ajustada, 2),
            'valor_residual_ajustado': round(valor_residual_ajustado, 2),
            'coef_actual': round(coef_actual, 6),
            'coef_anterior': round(coef_anterior, 6)
        }
    
    def _extraer_fechas_de_errores(self, errores):
        \"\"\"Extrae fechas faltantes de mensajes de error\"\"\"
        fechas = []
        for error in errores:
            if "Falta √≠ndice para" in error:
                fecha = error.split("para ")[-1]
                fechas.append(fecha)
        return fechas
    
    def calcular_inflacion_lote(self, bienes, ejercicio_actual, ejercicio_anterior, amortizaciones_data):
        \"\"\"Calcula inflaci√≥n para una lista de bienes\"\"\"
        resultados = {}
        
        for bien in bienes:
            amort_data = amortizaciones_data.get(bien.id, {})
            resultados[bien.id] = self.calcular_ajuste_inflacion(
                bien, ejercicio_actual, ejercicio_anterior, amort_data
            )
        
        return resultados
""")
    
    # modules/amortizaciones.py
    with open('modules/amortizaciones.py', 'w', encoding='utf-8') as f:
        f.write("""from datetime import datetime
from utils.validators import Validators

class AmortizacionCalculator:
    def __init__(self):
        pass
    
    def calcular_amortizacion(self, bien, ejercicio_liquidacion):
        \"\"\"Calcula la amortizaci√≥n de un bien para un ejercicio espec√≠fico\"\"\"
        if not bien.es_amortizable or bien.anos_amortizacion == 0:
            return {
                'amort_inicio': 0.0,
                'amort_ejercicio': 0.0,
                'amort_acumulada': 0.0,
                'valor_residual': bien.get_valor_base_calculo()
            }
        
        a√±o_liquidacion = Validators.extraer_a√±o_ejercicio(ejercicio_liquidacion)
        if not a√±o_liquidacion:
            raise ValueError("Fecha de ejercicio inv√°lida")
        
        if bien.tiene_fecha_diferida():
            return self._calcular_con_fecha_diferida(bien, ejercicio_liquidacion, a√±o_liquidacion)
        else:
            return self._calcular_desde_origen(bien, ejercicio_liquidacion, a√±o_liquidacion)
    
    def _calcular_con_fecha_diferida(self, bien, ejercicio_liquidacion, a√±o_liquidacion):
        a√±o_fecha_diferida = Validators.extraer_a√±o_ejercicio(bien.fecha_diferida)
        if not a√±o_fecha_diferida:
            raise ValueError(f"Fecha diferida inv√°lida: {bien.fecha_diferida}")
        
        amort_anual_original = bien.valor_origen / bien.anos_amortizacion
        amort_inicio = bien.get_amort_acum_inicial()
        
        a√±os_desde_fecha_diferida = a√±o_liquidacion - a√±o_fecha_diferida
        
        if a√±os_desde_fecha_diferida <= 0:
            amort_ejercicio = 0.0
        else:
            if bien.fecha_baja:
                try:
                    fecha_baja_obj = datetime.strptime(bien.fecha_baja, '%d/%m/%Y')
                    if fecha_baja_obj.year < a√±o_liquidacion:
                        amort_ejercicio = 0.0
                    else:
                        amort_ejercicio = amort_anual_original
                except ValueError:
                    amort_ejercicio = amort_anual_original
            else:
                amort_ejercicio = amort_anual_original
        
        amort_acumulada = amort_inicio + amort_ejercicio
        amort_acumulada = min(amort_acumulada, bien.valor_origen)
        valor_residual = bien.valor_origen - amort_acumulada
        
        return {
            'amort_inicio': round(amort_inicio, 2),
            'amort_ejercicio': round(amort_ejercicio, 2),
            'amort_acumulada': round(amort_acumulada, 2),
            'valor_residual': round(valor_residual, 2)
        }
    
    def _calcular_desde_origen(self, bien, ejercicio_liquidacion, a√±o_liquidacion):
        amort_anual = bien.valor_origen / bien.anos_amortizacion
        a√±os_hasta_inicio = a√±o_liquidacion - bien.ejercicio_alta
        
        if a√±os_hasta_inicio <= 0:
            amort_inicio = 0.0
        else:
            a√±os_amortizados = min(a√±os_hasta_inicio, bien.anos_amortizacion)
            amort_inicio = amort_anual * a√±os_amortizados
        
        a√±os_transcurridos_total = (a√±o_liquidacion - bien.ejercicio_alta) + 1
        
        if a√±os_transcurridos_total <= 0:
            amort_ejercicio = 0.0
        elif a√±os_transcurridos_total > bien.anos_amortizacion:
            amort_ejercicio = 0.0
        else:
            if bien.fecha_baja:
                try:
                    fecha_baja_obj = datetime.strptime(bien.fecha_baja, '%d/%m/%Y')
                    if fecha_baja_obj.year < a√±o_liquidacion:
                        amort_ejercicio = 0.0
                    else:
                        amort_ejercicio = amort_anual
                except ValueError:
                    amort_ejercicio = amort_anual
            else:
                amort_ejercicio = amort_anual
        
        amort_acumulada = amort_inicio + amort_ejercicio
        amort_acumulada = min(amort_acumulada, bien.valor_origen)
        valor_residual = bien.valor_origen - amort_acumulada
        
        return {
            'amort_inicio': round(amort_inicio, 2),
            'amort_ejercicio': round(amort_ejercicio, 2),
            'amort_acumulada': round(amort_acumulada, 2),
            'valor_residual': round(valor_residual, 2)
        }
    
    def calcular_amortizaciones_lote(self, bienes, ejercicio_liquidacion):
        \"\"\"Calcula amortizaciones para una lista de bienes\"\"\"
        resultados = {}
        for bien in bienes:
            try:
                resultados[bien.id] = self.calcular_amortizacion(bien, ejercicio_liquidacion)
            except Exception as e:
                resultados[bien.id] = {
                    'amort_inicio': 0.0,
                    'amort_ejercicio': 0.0,
                    'amort_acumulada': 0.0,
                    'valor_residual': bien.get_valor_base_calculo(),
                    'error': str(e)
                }
        return resultados
""")
    
    # modules/filtros.py
    with open('modules/filtros.py', 'w', encoding='utf-8') as f:
        f.write("""from utils.validators import Validators

class FiltroEjercicio:
    def __init__(self):
        pass
    
    def filtrar_bienes_por_ejercicio(self, bienes, ejercicio_liquidacion):
        if not ejercicio_liquidacion or not Validators.validar_fecha(ejercicio_liquidacion):
            return list(bienes)
        
        a√±o_liquidacion = Validators.extraer_a√±o_ejercicio(ejercicio_liquidacion)
        if not a√±o_liquidacion:
            return list(bienes)
        
        bienes_filtrados = []
        for bien in bienes:
            if bien.tiene_fecha_diferida():
                a√±o_fecha_diferida = Validators.extraer_a√±o_ejercicio(bien.fecha_diferida)
                if a√±o_fecha_diferida and a√±o_fecha_diferida <= a√±o_liquidacion:
                    bienes_filtrados.append(bien)
            else:
                if bien.ejercicio_alta <= a√±o_liquidacion:
                    bienes_filtrados.append(bien)
        
        return bienes_filtrados
""")
    print("‚úÖ modules/ creados")

def crear_views():
    # views/vista_ajustada.py - COMPLETA
    with open('views/vista_ajustada.py', 'w', encoding='utf-8') as f:
        f.write("""import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
from utils.validators import Validators

class VistaAjustada:
    def __init__(self, parent_app, bienes, ejercicio_actual, ejercicio_anterior, 
                 amort_calculator, inflacion_calculator):
        self.parent_app = parent_app
        self.bienes = bienes
        self.ejercicio_actual = ejercicio_actual
        self.ejercicio_anterior = ejercicio_anterior
        self.amort_calculator = amort_calculator
        self.inflacion_calculator = inflacion_calculator
        
        self.window = None
        self.tree = None
        self.status_var = None
        self.is_calculating = False
        
        self.create_window()
    
    def create_window(self):
        \"\"\"Crea la ventana de vista ajustada\"\"\"
        self.window = tk.Toplevel()
        self.window.title("Vista Ajustada por Inflaci√≥n FACPCE")
        self.window.geometry("1600x800")
        if hasattr(self.parent_app, 'root'):
            self.window.transient(self.parent_app.root)
        
        # Frame principal
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.pack(fill='both', expand=True)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, 
                               text="Valores Ajustados por Inflaci√≥n FACPCE", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=(0, 10))
        
        # Informaci√≥n de ejercicios
        info_frame = ttk.Frame(main_frame)
        info_frame.pack(fill='x', pady=(0, 10))
        
        ttk.Label(info_frame, text=f"Ejercicio Actual: {self.ejercicio_actual}", 
                 font=('Arial', 10, 'bold')).pack(side='left', padx=(0, 20))
        ttk.Label(info_frame, text=f"Ejercicio Anterior: {self.ejercicio_anterior}", 
                 font=('Arial', 10, 'bold')).pack(side='left')
        
        # Botones
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill='x', pady=(0, 10))
        
        self.calcular_btn = ttk.Button(button_frame, text="üîÑ Calcular Ajustes", 
                                     command=self.calcular_ajustes)
        self.calcular_btn.pack(side='left', padx=(0, 10))
        
        self.export_btn = ttk.Button(button_frame, text="üìä Exportar CSV", 
                                   command=self.export_csv, state='disabled')
        self.export_btn.pack(side='left', padx=(0, 10))
        
        self.indices_btn = ttk.Button(button_frame, text="üìà Gestionar √çndices FACPCE", 
                                    command=self.abrir_gestion_indices)
        self.indices_btn.pack(side='left')
        
        # Tabla
        self.setup_table(main_frame)
        
        # Barra de estado
        self.status_var = tk.StringVar()
        self.status_var.set("Listo para calcular ajustes")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, 
                             relief='sunken', anchor='w')
        status_bar.pack(fill='x', side='bottom')
        
        # Protocolo de cierre
        self.window.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def setup_table(self, parent):
        \"\"\"Configura la tabla de valores ajustados\"\"\"
        table_frame = ttk.Frame(parent)
        table_frame.pack(fill='both', expand=True)
        
        # Columnas para vista ajustada
        columns = ('ID', 'Descripci√≥n', 'Tipo de Bien', 'F.Ingreso', 'F.Diferida',
                  'Valor Origen Hist√≥rico', 'V.O. Ajust. Anterior', 'V.O. Ajust. Actual',
                  'Ajuste Infl. V.O.', 'Amort.Inicio Ajust.Ant.', 'Amort.Inicio Ajust.Act.',
                  'Ajuste Infl. Amort.Inicio', 'Amort.Ejercicio Ajust.', 
                  'Amort.Acum. Cierre Ajust.', 'Valor Residual Ajustado')
        
        self.tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=20)
        
        # Configurar columnas
        column_widths = {
            'ID': 50, 'Descripci√≥n': 150, 'Tipo de Bien': 120,
            'F.Ingreso': 80, 'F.Diferida': 80, 'Valor Origen Hist√≥rico': 120,
            'V.O. Ajust. Anterior': 120, 'V.O. Ajust. Actual': 120,
            'Ajuste Infl. V.O.': 110, 'Amort.Inicio Ajust.Ant.': 130,
            'Amort.Inicio Ajust.Act.': 130, 'Ajuste Infl. Amort.Inicio': 140,
            'Amort.Ejercicio Ajust.': 130, 'Amort.Acum. Cierre Ajust.': 140,
            'Valor Residual Ajustado': 140
        }
        
        for col in columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=column_widths.get(col, 100), anchor='center')
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(table_frame, orient='vertical', command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(table_frame, orient='horizontal', command=self.tree.xview)
        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        self.tree.pack(side='left', fill='both', expand=True)
        v_scrollbar.pack(side='right', fill='y')
        h_scrollbar.pack(side='bottom', fill='x')
    
    def calcular_ajustes(self):
        \"\"\"Calcula los ajustes por inflaci√≥n en hilo separado\"\"\"
        if self.is_calculating:
            return
        
        self.is_calculating = True
        self.calcular_btn.config(state='disabled')
        self.status_var.set("Calculando ajustes por inflaci√≥n...")
        
        # Ejecutar c√°lculo en hilo separado
        thread = threading.Thread(target=self._calcular_ajustes_thread)
        thread.daemon = True
        thread.start()
    
    def _calcular_ajustes_thread(self):
        \"\"\"Hilo para calcular ajustes\"\"\"
        try:
            # Primero calcular amortizaciones hist√≥ricas
            amortizaciones = self.amort_calculator.calcular_amortizaciones_lote(
                list(self.bienes.values()), self.ejercicio_actual)
            
            # Luego calcular ajustes por inflaci√≥n
            inflaciones = self.inflacion_calculator.calcular_inflacion_lote(
                list(self.bienes.values()), self.ejercicio_actual, 
                self.ejercicio_anterior, amortizaciones)
            
            # Actualizar interfaz en hilo principal
            self.window.after(0, self._actualizar_tabla, inflaciones, amortizaciones)
            
        except Exception as e:
            self.window.after(0, self._mostrar_error, str(e))
    
    def _actualizar_tabla(self, inflaciones, amortizaciones):
        \"\"\"Actualiza la tabla con los resultados\"\"\"
        # Limpiar tabla
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Procesar resultados
        errores_indices = []
        bienes_procesados = 0
        
        for bien_id, bien in self.bienes.items():
            inflacion_data = inflaciones.get(bien_id, {})
            
            if inflacion_data.get('error', False):
                errores_indices.append(inflacion_data)
                continue
            
            # Guardar datos en el bien para exportaci√≥n
            bien.inflacion_data = inflacion_data
            
            values = (
                bien.id,
                bien.descripcion,
                bien.tipo_bien,
                bien.fecha_ingreso,
                bien.fecha_diferida or '',
                Validators.format_decimal_argentino(inflacion_data.get('valor_origen_historico', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('vo_ajustado_anterior', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('vo_ajustado_actual', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('ajuste_infl_vo_ejercicio', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('amort_acum_inicio_ajustada_anterior', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('amort_acum_inicio_ajustada_actual', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('ajuste_infl_amort_inicio_ejercicio', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('amort_ejercicio_ajustada', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('amort_acum_cierre_ajustada', 0)),
                Validators.format_decimal_argentino(inflacion_data.get('valor_residual_ajustado', 0))
            )
            
            self.tree.insert('', 'end', values=values)
            bienes_procesados += 1
        
        # Manejar errores de √≠ndices faltantes
        if errores_indices:
            self._manejar_errores_indices(errores_indices)
        
        # Actualizar estado
        self.is_calculating = False
        self.calcular_btn.config(state='normal')
        self.export_btn.config(state='normal' if bienes_procesados > 0 else 'disabled')
        self.status_var.set(f"‚úÖ {bienes_procesados} bienes procesados. "
                          f"{len(errores_indices)} errores por √≠ndices faltantes.")
    
    def _manejar_errores_indices(self, errores):
        \"\"\"Maneja errores de √≠ndices faltantes\"\"\"
        fechas_faltantes = set()
        for error in errores:
            fechas_faltantes.update(error.get('fechas_faltantes', []))
        
        if fechas_faltantes:
            mensaje = f"Faltan √≠ndices FACPCE para las siguientes fechas:\\n"
            mensaje += "\\n".join(sorted(fechas_faltantes))
            mensaje += f"\\n\\nPuede encontrar los √≠ndices en:\\n{errores[0].get('link_facpce', '')}"
            
            self.window.after(0, messagebox.showwarning, "√çndices Faltantes", mensaje)
    
    def _mostrar_error(self, error_msg):
        \"\"\"Muestra error en hilo principal\"\"\"
        self.is_calculating = False
        self.calcular_btn.config(state='normal')
        self.status_var.set(f"‚ùå Error: {error_msg}")
        messagebox.showerror("Error", f"Error calculando ajustes: {error_msg}")
    
    def abrir_gestion_indices(self):
        \"\"\"Abre ventana de gesti√≥n de √≠ndices\"\"\"
        from views.gestion_indices import GestionIndices
        GestionIndices(self.parent_app.gestor_indices, self.window)
    
    def export_csv(self):
        \"\"\"Exporta vista ajustada a CSV con formato argentino\"\"\"
        file_path = filedialog.asksaveasfilename(
            title="Exportar Vista Ajustada",
            defaultextension=".csv",
            filetypes=[("Archivos CSV", "*.csv")]
        )
        
        if not file_path:
            return
        
        try:
            bienes_con_inflacion = [bien for bien in self.bienes.values() 
                                  if hasattr(bien, 'inflacion_data') and bien.inflacion_data]
            
            self.parent_app.csv_handler.export_to_file(
                bienes_con_inflacion, file_path, include_inflacion=True)
            
            self.status_var.set(f"‚úÖ Vista ajustada exportada a {file_path}")
            messagebox.showinfo("√âxito", f"Vista ajustada exportada correctamente\\n\\nFormato: CSV con punto y coma (;) y decimales argentinos")
            
        except Exception as e:
            messagebox.showerror("Error", f"Error exportando: {str(e)}")
    
    def on_closing(self):
        \"\"\"Maneja el cierre de la ventana\"\"\"
        if self.is_calculating:
            if messagebox.askokcancel("Calculando", "¬øCancelar c√°lculo en progreso?"):
                self.window.destroy()
        else:
            self.window.destroy()
""")
    
    # views/gestion_indices.py - COMPLETA
    with open('views/gestion_indices.py', 'w', encoding='utf-8') as f:
        f.write("""import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import webbrowser
from utils.validators import Validators

class GestionIndices:
    def __init__(self, gestor_indices, parent_window=None):
        self.gestor_indices = gestor_indices
        self.parent_window = parent_window
        
        self.window = None
        self.tree = None
        self.fecha_var = None
        self.indice_var = None
        self.obs_var = None
        
        self.create_window()
        self.refresh_table()
    
    def create_window(self):
        \"\"\"Crea la ventana de gesti√≥n de √≠ndices\"\"\"
        self.window = tk.Toplevel()
        self.window.title("Gesti√≥n de √çndices FACPCE")
        self.window.geometry("800x600")
        
        if self.parent_window:
            self.window.transient(self.parent_window)
        
        # Frame principal
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.pack(fill='both', expand=True)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, 
                               text="Gesti√≥n de √çndices FACPCE", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=(0, 20))
        
        # Frame superior - formulario
        form_frame = ttk.LabelFrame(main_frame, text="Agregar/Editar √çndice", padding="10")
        form_frame.pack(fill='x', pady=(0, 10))
        
        self.setup_form(form_frame)
        
        # Frame medio - botones
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill='x', pady=(0, 10))
        
        self.setup_buttons(button_frame)
        
        # Frame inferior - tabla
        table_frame = ttk.LabelFrame(main_frame, text="√çndices Cargados", padding="10")
        table_frame.pack(fill='both', expand=True)
        
        self.setup_table(table_frame)
        
        # Instrucciones para decimales
        instrucciones_frame = ttk.Frame(main_frame)
        instrucciones_frame.pack(fill='x', pady=(10, 0))
        
        instrucciones_label = ttk.Label(instrucciones_frame, 
                                      text="üí° Use coma para decimales (ej: 1234,567890) - Link oficial:", 
                                      font=('Arial', 9))
        instrucciones_label.pack(side='left')
        
        link_button = ttk.Button(instrucciones_frame, text="FACPCE - √çndices Oficiales", 
                               command=self.abrir_link_facpce)
        link_button.pack(side='left', padx=(10, 0))
    
    def setup_form(self, parent):
        \"\"\"Configura el formulario de entrada\"\"\"
        # Variables
        self.fecha_var = tk.StringVar()
        self.indice_var = tk.StringVar()
        self.obs_var = tk.StringVar()
        
        # Grid
        ttk.Label(parent, text="Fecha (DD/MM/AAAA):").grid(row=0, column=0, sticky='w', padx=(0, 10))
        fecha_entry = ttk.Entry(parent, textvariable=self.fecha_var, width=15)
        fecha_entry.grid(row=0, column=1, sticky='w', padx=(0, 20))
        
        ttk.Label(parent, text="√çndice (use , para decimales):").grid(row=0, column=2, sticky='w', padx=(0, 10))
        indice_entry = ttk.Entry(parent, textvariable=self.indice_var, width=20)
        indice_entry.grid(row=0, column=3, sticky='w', padx=(0, 20))
        
        ttk.Label(parent, text="Observaciones:").grid(row=1, column=0, sticky='w', padx=(0, 10), pady=(10, 0))
        obs_entry = ttk.Entry(parent, textvariable=self.obs_var, width=50)
        obs_entry.grid(row=1, column=1, columnspan=3, sticky='ew', pady=(10, 0))
        
        parent.columnconfigure(1, weight=1)
    
    def setup_buttons(self, parent):
        \"\"\"Configura los botones\"\"\"
        ttk.Button(parent, text="‚ûï Agregar √çndice", 
                  command=self.agregar_indice).pack(side='left', padx=(0, 10))
        
        ttk.Button(parent, text="üìÅ Importar CSV", 
                  command=self.importar_csv).pack(side='left', padx=(0, 10))
        
        ttk.Button(parent, text="üíæ Exportar CSV", 
                  command=self.exportar_csv).pack(side='left', padx=(0, 10))
        
        ttk.Button(parent, text="üìã Crear Template", 
                  command=self.crear_template).pack(side='left', padx=(0, 10))
        
        ttk.Button(parent, text="üóë Eliminar Seleccionado", 
                  command=self.eliminar_indice).pack(side='left', padx=(0, 10))
        
        ttk.Button(parent, text="üîÑ Actualizar", 
                  command=self.refresh_table).pack(side='right')
    
    def setup_table(self, parent):
        \"\"\"Configura la tabla de √≠ndices\"\"\"
        # Treeview
        columns = ('Fecha', '√çndice', 'Observaciones', 'Fecha Carga')
        self.tree = ttk.Treeview(parent, columns=columns, show='headings', height=15)
        
        # Configurar columnas
        self.tree.heading('Fecha', text='Fecha')
        self.tree.heading('√çndice', text='√çndice')
        self.tree.heading('Observaciones', text='Observaciones')
        self.tree.heading('Fecha Carga', text='Fecha Carga')
        
        self.tree.column('Fecha', width=100)
        self.tree.column('√çndice', width=150)
        self.tree.column('Observaciones', width=200)
        self.tree.column('Fecha Carga', width=150)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(parent, orient='vertical', command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack
        self.tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
        
        # Bind eventos
        self.tree.bind('<Double-1>', self.on_item_double_click)
    
    def agregar_indice(self):
        \"\"\"Agrega un nuevo √≠ndice\"\"\"
        fecha = self.fecha_var.get().strip()
        indice = self.indice_var.get().strip()
        observaciones = self.obs_var.get().strip()
        
        # Validaciones
        if not fecha:
            messagebox.showerror("Error", "Ingrese la fecha")
            return
        
        if not Validators.validar_fecha(fecha):
            messagebox.showerror("Error", "Fecha debe tener formato DD/MM/AAAA")
            return
        
        if not indice:
            messagebox.showerror("Error", "Ingrese el √≠ndice")
            return
        
        es_valido, mensaje = Validators.validar_indice_facpce(indice)
        if not es_valido:
            messagebox.showerror("Error", mensaje)
            return
        
        # Convertir √≠ndice con parser argentino
        indice_float = Validators.parse_decimal_argentino(indice)
        
        # Agregar al gestor
        if self.gestor_indices.agregar_indice(fecha, indice_float, observaciones):
            self.refresh_table()
            # Limpiar formulario
            self.fecha_var.set("")
            self.indice_var.set("")
            self.obs_var.set("")
            messagebox.showinfo("√âxito", f"√çndice agregado correctamente\\nValor: {Validators.format_decimal_argentino(indice_float, 6)}")
        else:
            messagebox.showerror("Error", "Error agregando el √≠ndice")
    
    def eliminar_indice(self):
        \"\"\"Elimina el √≠ndice seleccionado\"\"\"
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("Advertencia", "Seleccione un √≠ndice para eliminar")
            return
        
        item = selection[0]
        fecha = self.tree.item(item)['values'][0]
        
        if messagebox.askyesno("Confirmar", f"¬øEliminar √≠ndice del {fecha}?"):
            # Buscar clave
            from datetime import datetime
            try:
                fecha_obj = datetime.strptime(fecha, '%d/%m/%Y')
                key = f"{fecha_obj.month:02d}/{fecha_obj.year}"
                
                if key in self.gestor_indices.indices:
                    del self.gestor_indices.indices[key]
                    self.refresh_table()
                    messagebox.showinfo("√âxito", "√çndice eliminado")
                else:
                    messagebox.showerror("Error", "No se pudo eliminar el √≠ndice")
            except ValueError:
                messagebox.showerror("Error", "Error procesando la fecha")
    
    def on_item_double_click(self, event):
        \"\"\"Maneja doble click en la tabla\"\"\"
        selection = self.tree.selection()
        if selection:
            item = selection[0]
            values = self.tree.item(item)['values']
            
            # Cargar datos en formulario
            self.fecha_var.set(values[0])
            # Convertir √≠ndice de formato argentino a entrada
            indice_valor = values[1].replace('.', '').replace(',', '.')  # Normalizar primero
            try:
                indice_float = float(indice_valor)
                self.indice_var.set(Validators.format_decimal_argentino(indice_float, 6))
            except:
                self.indice_var.set(values[1])
            self.obs_var.set(values[2])
    
    def importar_csv(self):
        \"\"\"Importa √≠ndices desde CSV\"\"\"
        file_path = filedialog.askopenfilename(
            title="Importar √çndices CSV",
            filetypes=[("Archivos CSV", "*.csv")]
        )
        
        if not file_path:
            return
        
        count, error = self.gestor_indices.cargar_desde_csv(file_path)
        
        if error:
            messagebox.showerror("Error", f"Error importando CSV: {error}")
        else:
            self.refresh_table()
            messagebox.showinfo("√âxito", f"{count} √≠ndices importados correctamente\\n\\nFormato detectado autom√°ticamente (CSV con ; o ,)")
    
    def exportar_csv(self):
        \"\"\"Exporta √≠ndices a CSV\"\"\"
        file_path = filedialog.asksaveasfilename(
            title="Exportar √çndices CSV",
            defaultextension=".csv",
            filetypes=[("Archivos CSV", "*.csv")]
        )
        
        if not file_path:
            return
        
        success, error = self.gestor_indices.exportar_a_csv(file_path)
        
        if error:
            messagebox.showerror("Error", f"Error exportando CSV: {error}")
        else:
            messagebox.showinfo("√âxito", f"√çndices exportados a {file_path}\\n\\nFormato: CSV con punto y coma (;) y decimales argentinos")
    
    def crear_template(self):
        \"\"\"Crea un template CSV de ejemplo\"\"\"
        file_path = filedialog.asksaveasfilename(
            title="Crear Template de √çndices",
            defaultextension=".csv",
            filetypes=[("Archivos CSV", "*.csv")]
        )
        
        if not file_path:
            return
        
        try:
            import csv
            with open(file_path, 'w', newline='', encoding='utf-8') as file:
                csv_writer = csv.writer(file, delimiter=';')
                csv_writer.writerow(['Fecha', 'Indice', 'Observaciones'])
                
                # Ejemplos con formato argentino
                csv_writer.writerow(['31/12/2023', '1.234.567,890123', 'Diciembre 2023'])
                csv_writer.writerow(['31/01/2024', '1.267.890,123456', 'Enero 2024'])
                csv_writer.writerow(['29/02/2024', '1.301.234,567890', 'Febrero 2024'])
                csv_writer.writerow(['31/03/2024', '1.335.678,901234', 'Marzo 2024'])
            
            messagebox.showinfo("√âxito", f"Template creado en {file_path}\\n\\nEditelo con los √≠ndices reales de FACPCE")
            
        except Exception as e:
            messagebox.showerror("Error", f"Error creando template: {str(e)}")
    
    def refresh_table(self):
        \"\"\"Actualiza la tabla de √≠ndices\"\"\"
        # Limpiar tabla
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # Cargar √≠ndices ordenados
        indices = self.gestor_indices.get_todos_indices()
        
        for indice in indices:
            self.tree.insert('', 'end', values=(
                indice.fecha,
                Validators.format_decimal_argentino(indice.indice, 6),
                indice.observaciones,
                indice.fecha_carga
            ))
    
    def abrir_link_facpce(self):
        \"\"\"Abre el link de FACPCE en el navegador\"\"\"
        webbrowser.open('https://www.facpce.org.ar/indices-facpce/')
""")
    
    print("‚úÖ views/ completas creadas")

def crear_main():
    with open('main.py', 'w', encoding='utf-8') as f:
        f.write("""import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading

# Importar todos los m√≥dulos
from models.bien import Bien
from models.empresa import EmpresaData
from models.indice_facpce import GestorIndicesFACPCE
from utils.validators import Validators
from utils.csv_handler import CsvHandler
from modules.amortizaciones import AmortizacionCalculator
from modules.filtros import FiltroEjercicio
from modules.inflacion_calculator import InflacionCalculator

class AmortizacionApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Sistema de Amortizaci√≥n con Ajuste por Inflaci√≥n FACPCE + Decimales Argentinos")
        self.root.geometry("1400x800")
        
        # Datos principales
        self.empresa = EmpresaData()
        self.tipos_bienes = []
        self.bienes = {}
        self.next_id = 1
        self.tipos_configurados = False
        
        # Gestores e calculadoras
        self.csv_handler = CsvHandler()
        self.amort_calculator = AmortizacionCalculator()
        self.filtro_ejercicio = FiltroEjercicio()
        self.gestor_indices = GestorIndicesFACPCE()
        self.inflacion_calculator = InflacionCalculator(self.gestor_indices)
        
        self.setup_ui()
        self.show_welcome()
        
    def setup_ui(self):
        # UI b√°sica por ahora
        self.main_frame = ttk.Frame(self.root, padding="10")
        self.main_frame.pack(fill='both', expand=True)
        
        title_label = ttk.Label(self.main_frame, 
                               text="Sistema con Ajuste por Inflaci√≥n FACPCE + Decimales Argentinos", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=20)
        
        self.status_var = tk.StringVar()
        self.status_var.set("Sistema iniciado correctamente")
        status_bar = ttk.Label(self.main_frame, textvariable=self.status_var, 
                             relief='sunken', anchor='w')
        status_bar.pack(fill='x', side='bottom')
        
    def show_welcome(self):
        messagebox.showinfo("Sistema Iniciado", 
                          "Sistema de Amortizaci√≥n con Decimales Argentinos iniciado correctamente.\\n\\n" +
                          "Funcionalidades incluidas:\\n" +
                          "‚úÖ Decimales argentinos (1.234.567,89)\\n" +
                          "‚úÖ CSV con separador punto y coma (;)\\n" +
                          "‚úÖ Ajuste por inflaci√≥n FACPCE\\n" +
                          "‚úÖ Vista hist√≥rica y ajustada")
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = AmortizacionApp()
    app.run()
""")
    print("‚úÖ main.py creado")

def crear_archivos_adicionales():
    # README.md
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write("""# Sistema de Amortizaci√≥n con Ajuste por Inflaci√≥n FACPCE + Decimales Argentinos

## üöÄ Descripci√≥n
Sistema completo para gesti√≥n de bienes de uso con:
- ‚úÖ Amortizaci√≥n tradicional con fecha diferida
- ‚úÖ Ajuste por inflaci√≥n contable usando √≠ndices FACPCE
- ‚úÖ **Manejo completo de decimales en formato argentino (1.234.567,89)**
- ‚úÖ **CSV con separador punto y coma (;) para evitar conflictos**
- ‚úÖ Ventanas separadas para vista hist√≥rica y ajustada
- ‚úÖ Preparado para migraci√≥n a SQLite

## üìä Funcionalidades Principales

### Vista Hist√≥rica
- Gesti√≥n completa de bienes de uso
- Soporte para fecha diferida (balances anteriores)
- C√°lculos de amortizaci√≥n tradicional
- **Visualizaci√≥n con formato argentino: 1.234.567,89**
- Import/Export CSV con decimales argentinos

### Vista Ajustada por Inflaci√≥n
- C√°lculo autom√°tico de ajuste por inflaci√≥n FACPCE
- **Todos los valores en formato decimal argentino**
- √çndices FACPCE integrados con validaci√≥n
- Validaci√≥n autom√°tica de √≠ndices faltantes
- Link directo a fuente oficial FACPCE
- Multithreading para c√°lculos complejos

## üî¢ Manejo de Decimales Argentinos

### Formato de Entrada y Visualizaci√≥n
```
Valor: 1.234.567,89
- Separador de miles: . (punto)
- Separador decimal: , (coma)
```

### Archivos CSV
```csv
ID;Descripci√≥n;TipoBien;Amortizable;A√±os;Ejercicio;FechaIngreso;FechaBaja;ValorOrigen
1;M√°quina Industrial;Maquinaria;SI;10;2020;15/03/2020;;1.250.000,00
```

**Caracter√≠sticas CSV:**
- ‚úÖ Separador: **punto y coma (;)**
- ‚úÖ Decimales: **formato argentino (1.234.567,89)**
- ‚úÖ Compatible con Excel argentino
- ‚úÖ Sin conflictos entre separadores

## üéØ Ejecuci√≥n
```bash
python main.py
```

## üìã Estructura del Sistema

```
models/          # Clases de datos (Bien, Empresa, IndiceFACPCE)
utils/           # Utilidades con soporte decimal argentino
modules/         # L√≥gica de negocio
views/           # Ventanas de interfaz
data/            # Archivos de datos (futuro SQLite)
```

## üí° Ventajas del Sistema

### Decimales Argentinos
- **Sin conflictos**: `;` separa campos, `,` separa decimales
- **Excel compatible**: Excel argentino abre correctamente
- **Formato natural**: 1.234.567,89 es lo esperado por usuarios argentinos
- **Detecci√≥n autom√°tica**: funciona con archivos existentes
- **Conversi√≥n robusta**: parse autom√°tico de diferentes formatos

### Funcionalidad Completa
- **Vista hist√≥rica** y **vista ajustada** separadas
- **C√°lculos autom√°ticos** de inflaci√≥n FACPCE
- **Validaci√≥n inteligente** de √≠ndices faltantes
- **Templates autom√°ticos** para facilitar carga
- **Multithreading** para c√°lculos complejos

## üîó Integraci√≥n FACPCE

### Enlaces Directos
- **√çndices oficiales**: https://www.facpce.org.ar/indices-facpce/
- **Validaci√≥n autom√°tica** de √≠ndices faltantes
- **Gesti√≥n completa** de coeficientes de ajuste

---

## üéâ Sistema Listo para Producci√≥n

‚úÖ **Formato decimal argentino completo**  
‚úÖ **CSV sin conflictos con punto y coma**  
‚úÖ **Ajuste por inflaci√≥n FACPCE integrado**  
‚úÖ **Interfaz intuitiva y robusta**  
‚úÖ **Preparado para migraci√≥n a SQLite**  

**¬°Perfecto para contadores y estudios contables argentinos!**
""")
    print("‚úÖ README.md creado")

if __name__ == "__main__":
    crear_sistema_completo()